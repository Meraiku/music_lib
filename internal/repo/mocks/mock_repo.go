// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/meraiku/music_lib/internal/model"
)

// MockMusicRepository is a mock of MusicRepository interface.
type MockMusicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMusicRepositoryMockRecorder
}

// MockMusicRepositoryMockRecorder is the mock recorder for MockMusicRepository.
type MockMusicRepositoryMockRecorder struct {
	mock *MockMusicRepository
}

// NewMockMusicRepository creates a new mock instance.
func NewMockMusicRepository(ctrl *gomock.Controller) *MockMusicRepository {
	mock := &MockMusicRepository{ctrl: ctrl}
	mock.recorder = &MockMusicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicRepository) EXPECT() *MockMusicRepositoryMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockMusicRepository) AddSong(ctx context.Context, song *model.Song) (*model.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", ctx, song)
	ret0, _ := ret[0].(*model.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSong indicates an expected call of AddSong.
func (mr *MockMusicRepositoryMockRecorder) AddSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockMusicRepository)(nil).AddSong), ctx, song)
}

// DeleteSong mocks base method.
func (m *MockMusicRepository) DeleteSong(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSong", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSong indicates an expected call of DeleteSong.
func (mr *MockMusicRepositoryMockRecorder) DeleteSong(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSong", reflect.TypeOf((*MockMusicRepository)(nil).DeleteSong), ctx, id)
}

// GetSongs mocks base method.
func (m *MockMusicRepository) GetSongs(ctx context.Context, params *model.Parameters) ([]model.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongs", ctx, params)
	ret0, _ := ret[0].([]model.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongs indicates an expected call of GetSongs.
func (mr *MockMusicRepositoryMockRecorder) GetSongs(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongs", reflect.TypeOf((*MockMusicRepository)(nil).GetSongs), ctx, params)
}

// GetTextByID mocks base method.
func (m *MockMusicRepository) GetTextByID(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextByID indicates an expected call of GetTextByID.
func (mr *MockMusicRepositoryMockRecorder) GetTextByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextByID", reflect.TypeOf((*MockMusicRepository)(nil).GetTextByID), ctx, id)
}

// UpdateSong mocks base method.
func (m *MockMusicRepository) UpdateSong(ctx context.Context, song *model.Update) (*model.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSong", ctx, song)
	ret0, _ := ret[0].(*model.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSong indicates an expected call of UpdateSong.
func (mr *MockMusicRepositoryMockRecorder) UpdateSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSong", reflect.TypeOf((*MockMusicRepository)(nil).UpdateSong), ctx, song)
}
